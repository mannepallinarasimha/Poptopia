package com.kelloggs.promotions.promotionservice.service.impl;

import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.kelloggs.promotions.lib.entity.MiniGame;
import com.kelloggs.promotions.lib.entity.Token;
import com.kelloggs.promotions.lib.exception.ApiException;
import com.kelloggs.promotions.lib.model.MiniGameDTO;
import com.kelloggs.promotions.lib.repository.MiniGameRepo;
import com.kelloggs.promotions.lib.repository.TokenRepo;
import com.kelloggs.promotions.promotionservice.service.MiniGameService;


@Service
public class MiniGameServiceImpl implements MiniGameService {

    @Autowired
    private MiniGameRepo miniGameRepo;
    
    @Autowired
    private TokenRepo tokenRepo;

    /**
     * setMiniGame to set the state of game
     * 
     * @param gameId,token and state to be pass
     * @return	Return gameId and state if validated, otherwise throw exception
     * 
     * 
     */
	@Override
	public MiniGameDTO setMiniGame(MiniGameDTO miniGameDTO) {
		validateMinigame(miniGameDTO);
		String gameId=miniGameDTO.getGameId();
		Integer profileId=null;
		String userToken=miniGameDTO.getToken();
		Optional<MiniGame> optionalMG = miniGameRepo.findByGameId(gameId);
		if (optionalMG.isPresent()) {
			throw new ApiException(HttpStatus.BAD_REQUEST, 400,
					String.format("GameId %s is already present in database", gameId));
		} else {
			Optional<Token> optionalToken = tokenRepo.findByHashCode(userToken);
			if (optionalToken.isPresent()) {
				Token dbToken = optionalToken.get();
				profileId = dbToken.getProfileId();
			} else {
				throw new ApiException(HttpStatus.BAD_REQUEST, 400,
						String.format("Token %s is not present in database", userToken));
			}
		}
		MiniGame miniGame=miniGameRepo.save(getMiniGame(miniGameDTO,profileId));
		return getMiniGameDTO(miniGame);
	}
    
	MiniGame getMiniGame(MiniGameDTO miniGameDTO,Integer profileId) {
		MiniGame game=new MiniGame();
		game.setGameId(miniGameDTO.getGameId());
		game.setCreated(LocalDateTime.now());
		game.setUpdated(LocalDateTime.now());
		game.setState(miniGameDTO.getState());
		game.setProfileId(profileId);
		return game;
	}
	
	MiniGameDTO getMiniGameDTO(MiniGame miniGame) {
		MiniGameDTO dto=new MiniGameDTO();
		dto.setGameId(miniGame.getGameId());
		dto.setState(miniGame.getState());
		return dto;
	}
	
	void validateMinigame(MiniGameDTO miniGameDTO) {
		String result="";
		if (miniGameDTO.getGameId() == null || miniGameDTO.getGameId().isEmpty()) {
			result=result+" Game Id,";
		}
		if (miniGameDTO.getToken() == null || miniGameDTO.getToken().isEmpty()) {
			result=result+" User Token,";
		}
		if(miniGameDTO.getState()== null) {
			result=result+" State";
		}
		if(!result.isEmpty()) {
			throw new ApiException(HttpStatus.BAD_REQUEST, 400, String.format(result+" Not Found"));
		}
	}
}
